import os
import subprocess
import multiprocessing

Help("""
Welcome to TurboRav's monolithic test and synthesis build system.

Simulation tests
'scons build/test'           run all tests,
'scons build/test/riscv/'    run all riscv tests,
'scons build/test/riscv/add' run the riscv add test,
'scons build/test/unit/'     run all unit tests,
'scons build/test/unit/Alu'  run the Alu test from src/test/scala,
'scons build/test/c/'        run all c-based tests,

Synthesis
'scons build/synth/Soc.v'                             generate verilog code,
'scons build/synth/yosys/Soc.blif'                    Synthesize a technology-mapped netlist,
'scons build/synth/yosys/icoboard/Soc.asc'            Create a placed and routed textual bitstream,
'scons build/synth/yosys/icoboard/Soc.bin'            Create a netlist for FPGA-programming,
'scons build/synth/yosys/icoboard/icetime.report.txt' Create a timing report,

All build targets are files, or directories of files that can be
"built" by the build system. When SCons is given a directory for a
build target it will generate everything in that directory recursively
downwards.
""")

# Multi-threaded builds
SetOption("num_jobs", multiprocessing.cpu_count() + 1)

# Use host environment by default.
DefaultEnvironment(ENV = os.environ)

# This ensures the entire build directory is cleaned, even files in
# there that SCons didn't know that it generated.
Clean("build", "build")
if GetOption("clean"):
    # If you change a library like chisel.jar you need to also
    # invalidate the fsc cache. This can be hard to remember so we
    # invalidate the fsc cache on every clean command.
    subprocess.call(["fsc", "-reset"])

SConscript("src/SConscript", variant_dir = "build")
