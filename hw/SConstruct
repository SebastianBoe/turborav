import os

Help("""
       Type: 'scons build/test'                      to run all tests,
             'scons build/test/riscv/'               to run all riscv tests,
             'scons build/test/riscv/add'            to run the riscv add test,
             'scons build/test/unit/'                to run all unit tests,
             'scons build/test/unit/alu'             to run the alu unit test,
             'scons build/test/lint'                 to lint the scala code,
             'scons build/synthesis/turborav.bit'    to generate a netlist,
             'scons build/synthesis/programming.log' to program a netlist,
             'scons build'                           to build everything.

       All build targets are files, or directories of files that can
       be "built" by the build system. Even programming a netlist is
       considered just a build target that generates a programming.log
       text file.
""")

Clean("build", "build") # Force cleaning of entire build dir.
VariantDir("build", "src", duplicate=1)

COMMON_FLAGS = (" -m32"
                " -Wa,-march=RVIMAFDXhwacha "
                " -nostdlib "
)

CCFLAGS = COMMON_FLAGS + \
          (" -static"
           " -nostartfiles"
           " -ffreestanding"
           " -c"
)

CC = '/opt/riscv/bin/riscv64-unknown-elf-gcc'

riscv_program_env = Environment(
    CC = CC,
    AS = CC,
    LD = CC,
    CCFLAGS = CCFLAGS,
    ASFLAGS = CCFLAGS,
    LINKFLAGS = COMMON_FLAGS + " -Tbuild/misc/turborav.ld "
)
riscv_program_env['linker_script'] = "#build/misc/turborav.ld"
Export('riscv_program_env')

CHISEL_JAR     = "/usr/share/scala/chisel/chisel.jar"
COMMONS_IO_JAR = "/usr/share/java/commons-io/commons-io.jar"
CLASSPATH = "{0}:{1}".format(CHISEL_JAR, COMMONS_IO_JAR)
Export('CLASSPATH')

startup_file = SConscript('build/misc/SConscript')

turborav_jar    = SConscript('build/SConscript')
default_program = SConscript('build/programs/SConscript')

scala_env = Environment(ENV = os.environ)

SConscript(
    "build/test/unit/SConscript",
    exports = 'scala_env turborav_jar CLASSPATH default_program'
)

SConscript(
    'build/test/riscv/SConscript',
    exports = 'scala_env turborav_jar CLASSPATH riscv_program_env startup_file'
)

# Verilog code generation of build/verilog/Soc.v
soc_v = scala_env.Command(
    [
        "build/verilog/Soc.v",
        "build/verilog/Soc-harness.v"
    ],
    [turborav_jar, default_program],
    """scala \
    -classpath build/scala/classes/TurboRav.jar:{0}\
    TurboRav.TurboRav Soc {1} {2} 12 8"""
    .format(
        CLASSPATH,
        "build/verilog/",
        default_program
    )
)[0]

# Synthesis of build/synthesis/turborav.bit
scala_env.Command(
    "build/synthesis/design_routed.ncd",
    [
        soc_v,
        'build/synthesis/Makefile',
        'build/synthesis/turborav.ucf',
        'build/synthesis/turborav.ut'
    ],
    'make --dir=build/synthesis HDL_FILE={0} design_routed.ncd'.format(soc_v.abspath)
)
SideEffect("build/synthesis/design_routed.par", "build/synthesis/design_routed.ncd")

scala_env.Command(
    "build/synthesis/turborav.bit",
    "build/synthesis/design_routed.ncd",
    'make --dir=build/synthesis HDL_FILE={0} turborav.bit'.format(soc_v.abspath)
)

scala_env.Command(
    "build/synthesis/programming.log",
    "build/synthesis/turborav.bit",
    'make --dir=build/synthesis HDL_FILE={0} program'.format(soc_v.abspath)
)

SConscript("build/synthesis/SConscript")
SConscript("build/test/lint/SConscript")
