import os
import multiprocessing

Help("""Type:
'scons build/test'                      to run all tests,
'scons build/test/riscv/'               to run all riscv tests,
'scons build/test/riscv/add'            to run the riscv add test,
'scons build/test/unit/'                to run all unit tests,
'scons build/test/unit/Alu'             to run the Alu test from src/test/scala,
'scons build/test/lint'                 to lint the scala code,
'scons build/synthesis/Soc.v'           to generate verilog code,
'scons build/synthesis/turborav.bit'    to generate a netlist,
'scons build/synthesis/programming.log' to program a netlist,
'scons build'                           to build everything.

All build targets are files, or directories of files that can
be "built" by the build system. Even programming a netlist is
considered just a build target that generates a programming.log
text file.
""")

# This ensures the entire build directory is cleaned, even files in
# there that SCons didn't know that it generated.
Clean("build", "build")

# out-of-source build
VariantDir("build", "src", duplicate=1)

# Use as many threads as there are cores
SetOption("num_jobs", multiprocessing.cpu_count())

COMMON_FLAGS = (" -m32"
                " -Wa,-march=RVIMAFDXhwacha "
                " -nostdlib "
                " --std=gnu11"
)

CCFLAGS = COMMON_FLAGS + \
          (" -static"
           " -nostartfiles"
           " -ffreestanding"
           " -c"
)

CC = 'riscv64-unknown-elf-gcc'

riscv_program_env = Environment(
    ENV = os.environ,
    CC = CC,
    AS = CC,
    LD = CC,
    CCFLAGS = CCFLAGS,
    ASFLAGS = CCFLAGS,
    LINKFLAGS = COMMON_FLAGS + " -Tbuild/misc/turborav.ld "
)
riscv_program_env['linker_script'] = "#build/misc/turborav.ld"
Export('riscv_program_env')

CHISEL_JAR     = "/usr/share/scala/chisel/chisel.jar"
COMMONS_IO_JAR = "/usr/share/java/commons-io/commons-io.jar"
CLASSPATH = "{0}:{1}".format(CHISEL_JAR, COMMONS_IO_JAR)
Export('CLASSPATH')

startup_file = SConscript('build/misc/SConscript')

turborav_jar    = SConscript('build/SConscript')
default_program = SConscript('build/programs/SConscript')

scala_env = Environment(ENV = os.environ)

SConscript(
    "build/test/unit/SConscript",
    exports = 'scala_env turborav_jar CLASSPATH default_program'
)

SConscript(
    'build/test/riscv/SConscript',
    exports = 'scala_env turborav_jar CLASSPATH riscv_program_env startup_file'
)

SConscript(
    "build/synthesis/SConscript",
    exports = 'scala_env turborav_jar default_program'
)

SConscript("build/test/lint/SConscript")
