import os
import subprocess
import multiprocessing

# Allow user to customize the build from either the CLI or custom.py
vars = Variables('custom.py', ARGUMENTS)
vars.AddVariables(
    (
        'csmith_seed',
        """Create a csmith test with the given seed in
        build/test/csmith/$csmith_seed/""",
        16
    )
)

env = Environment(
    variables = vars,
    ENV = os.environ,
)

Help("""
Welcome to TurboRav's monolithic test and synthesis build system.

Simulation tests
'scons build/test'           run all tests
'scons build/test/riscv/'    run all riscv tests
'scons build/test/riscv/add' run the riscv add test
'scons build/test/unit/'     run all unit tests
'scons build/test/unit/Alu'  run the Alu test from src/test/scala
'scons build/test/c/'        run all c-based tests
'scons build/test/hybrid/'   run tests with custom firmware and custom testbench

Synthesis
'scons build/main/synth/Soc.v'                             generate verilog code
'scons build/main/synth/yosys/Soc.blif'                    Synthesize a technology-mapped netlist
'scons build/main/synth/yosys/icoboard/Soc.asc'            Create a placed and routed textual bitstream
'scons build/main/synth/yosys/icoboard/Soc.bin'            Create a netlist for FPGA-programming
'scons build/main/synth/yosys/icoboard/icetime.report.txt' Create a timing report

All build targets are files, or directories of files that can be
"built" by the build system. When SCons is given a directory for a
build target it will generate everything in that directory recursively
downwards.
""" + vars.GenerateHelpText(env)
)

# Multi-threaded builds
SetOption("num_jobs", multiprocessing.cpu_count() + 1)

# This ensures the entire build directory is cleaned, even files in
# there that SCons didn't know that it generated.
Clean("build", "build")
if GetOption("clean"):
    # If you change a library like chisel.jar you need to also
    # invalidate the fsc cache. This can be hard to remember so we
    # invalidate the fsc cache on every clean command.
    subprocess.call(["fsc", "-reset"])

# Place a cache in the build directory (ensuring that a clean build
# will clear the cache).
CacheDir('build/scons_cache')

SConscript(
    "src/SConscript",
    exports = "env",
    variant_dir = "build"
)
