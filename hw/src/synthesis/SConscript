Import('turborav_jar CLASSPATH default_program')

# Verilog code generation of build/synthesis/Soc.v
soc_v = Command(
    "Soc.v",
    [turborav_jar, default_program],
    """scala \
    -classpath {2}:{0}\
    TurboRav.TurboRav Soc build/synthesis {1} 12 8 True"""
    .format(
        CLASSPATH,
        default_program,
        turborav_jar
    )
)[0]

# Synthesis
Command(
    "design_routed.ncd",
    [
        soc_v,
        'Makefile',
        'turborav.ucf',
        'turborav.ut'
    ],
    'make --dir=build/synthesis HDL_FILE=Soc.v design_routed.ncd'
)
SideEffect("design_routed.par", "design_routed.ncd")

Command(
    "turborav.bit",
    "design_routed.ncd",
    'make --dir=build/synthesis HDL_FILE=Soc.v turborav.bit'
)

Command(
    "programming.log",
    "turborav.bit",
    'make --dir=build/synthesis HDL_FILE=Soc.v program'
)

Command(
    "slices.txt",
    "design_routed.par",
    "awk '/Number of Slices/{ printf \"YVALUE=%s\", $4 }' $SOURCE > $TARGET"
)

Command(
    "timing.txt",
    ["design_routed.par", "period_to_frequency.py"],
    """echo -n "YVALUE=" > $TARGET && awk -F \"|\" '/NET \"clk_/{ print $4 }' $SOURCE |\
    python build/synthesis/period_to_frequency.py >> $TARGET
    """
)

log = File("yosys.log")
yosys_env = Environment(YOSYS_LOG = log)
Command(
    ["Soc.blif", log],
    soc_v,
    'yosys -p "synth_ice40 -noflatten" $SOURCE > $YOSYS_LOG'
)
