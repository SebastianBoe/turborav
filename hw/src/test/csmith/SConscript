Import('turborav_program_env sim_env seed')

# Re-purposing the compiler verification tool csmith to verify CPUs
# was not an original thought. Credit goes to Clifford Wolf.
# https://github.com/ucb-bar/riscv-torture/issues/7#issuecomment-217152324

module = "Riscvtest"

c_sim_env = sim_env.Clone(
    MODULE     = module,
    TOP_MODULE = "Soc"
)

test_c_unpatched = Command(
    File("test.c.unpatched"),
    [],
    """csmith               \
    --no-packed-struct      \
    --no-argc               \
    --seed $SEED            \
    --concise               \
    --quiet                 \
    --no-float              \
    --no-arrays             \
    --max-block-depth 1     \
    --max-expr-complexity 1 \
    --max-funcs 1           \
    --max-struct-fields 1   \
    > $TARGET
    """,
    SEED = seed
)

# Default is to not print the global variables, but doing so is useful
# to narrow down issues so we modify the generated code.
test_c = Command(
    File("test.c"),
    test_c_unpatched,
    "sed 's/int print_hash_value = 0/int print_hash_value = 1/g' < $SOURCE > $TARGET"
)

CSMITH_DEFINES = [
    "CSMITH_MINIMAL",
    "TCC",
    "NO_PRINTF",
]

c_test_env = turborav_program_env.Clone()
c_test_env.Append(
    SEED = seed,
    CPPDEFINES = CSMITH_DEFINES + [
        "RISCV"
    ],
    CPPPATH = ".",
    # Disable warnings. CSmith's generated code produces a lot of
    # warnings.
    CFLAGS = "-w"
)

program = c_test_env.Program(
    [
        test_c,
        c_test_env["crt0_o"]
    ]
)[0]
Depends(program, c_test_env["LINKER_SCRIPT"])

# The simulation will produce a file called stdout.txt that contains
# the printf's of the simulated FW.
stdout = File("stdout.txt")

target_dir = Dir(".")
c_sim_env.Simulate(
    [File("jenkins.xml"), stdout],
    [c_sim_env["TURBORAV_JAR"], program],
    TARGET_DIR = target_dir,
    ROM = program.path
)

c_test_env.Disassemble(program) # Generate disassembly for debugging

host_program = Program(
    Object(
        File("test_x64.o"),
        test_c,
        CPPDEFINES = CSMITH_DEFINES,
        CFLAGS = "-w -g --std=gnu11",
        CPPPATH = "."
    )
)

host_stdout = Command(
    "host_stdout.txt",
    host_program,
    "timeout 1 $SOURCE 0> $TARGET"
)
